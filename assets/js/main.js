// Aguarda o DOM estar completamente carregado
document.addEventListener('DOMContentLoaded', function() {
    
    // Inicialização de todas as funcionalidades
    initFAQ();
    initNavigation();
    initScrollEffects();
    initContactForm();
    initAnimations();
    initPortfolioModal();
    initSmoothScrolling();
    
    // Adiciona classe de carregamento ao body
    document.body.classList.add('loaded');
});

// Navegação responsiva
function initNavigation() {
    const navToggle = document.getElementById('nav-toggle');
    const navMenu = document.getElementById('nav-menu');
    const header = document.querySelector('.header');
    
    // Toggle do menu mobile
    if (navToggle && navMenu) {
        navToggle.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            navToggle.classList.toggle('active');
        });
    }
    
    // Fechar menu ao clicar em um link
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.addEventListener('click', function() {
            if (navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
                navToggle.classList.remove('active');
            }
        });
    });
    
    // Header com scroll
    window.addEventListener('scroll', function() {
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });
    
    // Adiciona classe ativa ao link da navegação baseado na seção atual
    const sections = document.querySelectorAll('section[id]');
    const navItems = document.querySelectorAll('.nav-link');
    
    window.addEventListener('scroll', function() {
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (window.scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });
        
        navItems.forEach(item => {
            item.classList.remove('active');
            if (item.getAttribute('href') === `#${current}`) {
                item.classList.add('active');
            }
        });
    });
}

// Efeitos de scroll
function initScrollEffects() {
    // Scroll reveal para elementos
    const revealElements = document.querySelectorAll('.service-card, .benefit-item, .portfolio-item, .pricing-card');
    
    const revealOnScroll = function() {
        revealElements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;
            const elementVisible = 150;
            
            if (elementTop < window.innerHeight - elementVisible) {
                element.classList.add('reveal', 'active');
            }
        });
    };
    
    window.addEventListener('scroll', revealOnScroll);
    revealOnScroll(); // Executa uma vez no carregamento
    
    // Parallax suave para o hero
    const heroVideo = document.querySelector('.hero-video');
    if (heroVideo) {
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            heroVideo.style.transform = `translateY(${rate}px)`;
        });
    }
}

// Formulário de contato
function initContactForm() {
    const contactForm = document.getElementById('contactForm');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Adiciona estado de loading
            const submitBtn = contactForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
            submitBtn.disabled = true;
            
            // Simula envio (substitua por sua lógica real)
            setTimeout(function() {
                // Sucesso
                showNotification('Mensagem enviada com sucesso! Entraremos em contato em breve.', 'success');
                contactForm.reset();
                
                // Restaura botão
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }, 2000);
        });
        
        // Validação em tempo real
        const inputs = contactForm.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                validateField(this);
            });
            
            input.addEventListener('input', function() {
                if (this.classList.contains('error')) {
                    validateField(this);
                }
            });
        });
    }
}

// Validação de campos
function validateField(field) {
    const value = field.value.trim();
    let isValid = true;
    let errorMessage = '';
    
    // Remove classes de erro anteriores
    field.classList.remove('error');
    removeFieldError(field);
    
    // Validações específicas
    if (field.hasAttribute('required') && !value) {
        isValid = false;
        errorMessage = 'Este campo é obrigatório';
    } else if (field.type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
            isValid = false;
            errorMessage = 'Email inválido';
        }
    } else if (field.type === 'tel' && value) {
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
        if (!phoneRegex.test(value)) {
            isValid = false;
            errorMessage = 'Telefone inválido';
        }
    }
    
    // Aplica validação
    if (!isValid) {
        field.classList.add('error');
        showFieldError(field, errorMessage);
    }
    
    return isValid;
}

// Mostra erro do campo
function showFieldError(field, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'field-error';
    errorDiv.textContent = message;
    errorDiv.style.color = '#ef4444';
    errorDiv.style.fontSize = '0.875rem';
    errorDiv.style.marginTop = '0.25rem';
    
    field.parentNode.appendChild(errorDiv);
}

// Remove erro do campo
function removeFieldError(field) {
    const errorDiv = field.parentNode.querySelector('.field-error');
    if (errorDiv) {
        errorDiv.remove();
    }
}

// Sistema de notificações
function showNotification(message, type = 'info') {
    // Remove notificações existentes
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Cria nova notificação
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
        <button class="notification-close">
            <i class="fas fa-times"></i>
        </button>
    `;
    
    // Estilos da notificação
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        display: flex;
        align-items: center;
        gap: 1rem;
        max-width: 400px;
        animation: slideInRight 0.3s ease-out;
    `;
    
    // Adiciona ao DOM
    document.body.appendChild(notification);
    
    // Botão de fechar
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', function() {
        notification.style.animation = 'slideOutRight 0.3s ease-out';
        setTimeout(() => notification.remove(), 300);
    });
    
    // Auto-remove após 5 segundos
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// Animações e interações
function initAnimations() {
    // Contador animado para estatísticas
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    const animateCounter = function(element) {
        const target = parseInt(element.getAttribute('data-target'));
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        
        const timer = setInterval(() => {
            current += step;
            if (current >= target) {
                current = target;
                clearInterval(timer);
                
                // Adiciona o sufixo correto baseado no target
                if (target === 98) {
                    element.textContent = current + '%';
                } else if (target === 24) {
                    element.textContent = current + 'h';
                } else {
                    element.textContent = current + '+';
                }
            } else {
                element.textContent = Math.floor(current);
            }
        }, 16);
    };
    
    // Observa quando as estatísticas entram na tela
    const statsObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateCounter(entry.target);
                statsObserver.unobserve(entry.target);
            }
        });
    });
    
    statNumbers.forEach(stat => {
        statsObserver.observe(stat);
    });
    
    // Hover effects para cards
    const cards = document.querySelectorAll('.service-card, .pricing-card, .portfolio-item');
    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
}

// Modal do portfólio
function initPortfolioModal() {
    const portfolioItems = document.querySelectorAll('.portfolio-item');
    
    portfolioItems.forEach(item => {
        const video = item.querySelector('.portfolio-video');
        
        // Adiciona funcionalidade de hover para vídeos
        if (video) {
            item.addEventListener('mouseenter', function() {
                video.play().catch(e => console.log('Autoplay prevented'));
            });
            
            item.addEventListener('mouseleave', function() {
                video.pause();
                video.currentTime = 0;
            });
        }
        
        item.addEventListener('click', function(e) {
            e.preventDefault();
            
            const portfolioLink = this.querySelector('.portfolio-link');
            const title = this.querySelector('h3').textContent;
            const category = this.querySelector('p').textContent;
            const image = this.querySelector('img');
            
            // Verifica se é um link de vídeo
            if (portfolioLink && portfolioLink.getAttribute('href').endsWith('.mp4')) {
                const videoSrc = portfolioLink.getAttribute('href');
                showVideoModal(title, category, videoSrc);
            } else {
                const imageSrc = image ? image.src : '';
                showPortfolioModal(title, category, imageSrc);
            }
        });
    });
}

// Mostra modal de vídeo
function showVideoModal(title, category, videoSrc) {
    // Remove modais existentes
    const existingModals = document.querySelectorAll('.video-modal, .portfolio-modal');
    existingModals.forEach(modal => modal.remove());
    
    // Cria modal de vídeo
    const modal = document.createElement('div');
    modal.className = 'video-modal';
    modal.innerHTML = `
        <div class="modal-overlay"></div>
        <div class="modal-content video-modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
                <span class="modal-category">${category}</span>
                <button class="modal-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body video-modal-body">
                <video controls autoplay style="width: 100%; height: 300px; border-radius: 10px;">
                    <source src="${videoSrc}" type="video/mp4">
                    Seu navegador não suporta o elemento de vídeo.
                </video>
            </div>
            <div class="modal-footer">
                <p>📹 Vídeo criado com tecnologia de IA avançada</p>
            </div>
        </div>
    `;
    
    // Estilos do modal de vídeo (tamanho reduzido)
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease-out;
    `;
    
    // Adiciona ao DOM
    document.body.appendChild(modal);
    
    // Fecha modal ao clicar no overlay ou botão
    const overlay = modal.querySelector('.modal-overlay');
    const closeBtn = modal.querySelector('.modal-close');
    
    [overlay, closeBtn].forEach(element => {
        element.addEventListener('click', function() {
            modal.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => modal.remove(), 300);
        });
    });
    
    // Fecha com ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            modal.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => modal.remove(), 300);
        }
    });
}

// Mostra modal do portfólio
function showPortfolioModal(title, category, image) {
    // Remove modais existentes
    const existingModals = document.querySelectorAll('.portfolio-modal');
    existingModals.forEach(modal => modal.remove());
    
    // Cria modal
    const modal = document.createElement('div');
    modal.className = 'portfolio-modal';
    modal.innerHTML = `
        <div class="modal-overlay"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
                <span class="modal-category">${category}</span>
                <button class="modal-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <img src="${image}" alt="${title}">
                <div class="modal-description">
                    <p>Este é um exemplo de nosso trabalho na categoria ${category.toLowerCase()}. 
                    Criamos conteúdo personalizado e otimizado para maximizar o engajamento e conversões.</p>
                    <div class="modal-features">
                        <span class="feature-tag">IA Generativa</span>
                        <span class="feature-tag">Edição Profissional</span>
                        <span class="feature-tag">Otimizado para Mobile</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a href="#contact" class="btn btn-primary">Solicitar Orçamento</a>
            </div>
        </div>
    `;
    
    // Estilos do modal
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease-out;
    `;
    
    // Adiciona ao DOM
    document.body.appendChild(modal);
    
    // Fecha modal ao clicar no overlay ou botão
    const overlay = modal.querySelector('.modal-overlay');
    const closeBtn = modal.querySelector('.modal-close');
    
    [overlay, closeBtn].forEach(element => {
        element.addEventListener('click', function() {
            modal.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => modal.remove(), 300);
        });
    });
    
    // Fecha com ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            modal.style.animation = 'fadeOut 0.3s ease-out';
            setTimeout(() => modal.remove(), 300);
        }
    });
}

// Scroll suave para links internos
function initSmoothScrolling() {
    const internalLinks = document.querySelectorAll('a[href^="#"]');
    
    internalLinks.forEach(link => {
        // Pula links que estão dentro do FAQ
        if (link.closest('.faq-item')) {
            return;
        }
        
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                const headerHeight = document.querySelector('.header').offsetHeight;
                const targetPosition = targetElement.offsetTop - headerHeight - 20;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Lazy loading para imagens
function initLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => {
        imageObserver.observe(img);
    });
}

// Performance e otimizações
function initPerformanceOptimizations() {
    // Preload de recursos críticos
    const criticalResources = [
        'https://centroservice.com.br/midia/video.mp4',
        'assets/css/style.css',
        'assets/js/main.js'
    ];
    
    criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.includes('.css') ? 'style' : resource.includes('.js') ? 'script' : 'video';
        document.head.appendChild(link);
    });
    
    // Debounce para eventos de scroll
    let scrollTimeout;
    window.addEventListener('scroll', function() {
        if (scrollTimeout) {
            clearTimeout(scrollTimeout);
        }
        scrollTimeout = setTimeout(function() {
            // Executa código de scroll otimizado
        }, 16);
    });
}

// FAQ Accordion
function initFAQ() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    console.log('FAQ items found:', faqItems.length);
    
    if (faqItems.length === 0) return;
    
    faqItems.forEach((item, index) => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        const icon = item.querySelector('.faq-icon i');
        
        // Adiciona evento de clique
        question.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('FAQ item clicked');
            const isActive = item.classList.contains('active');
            
            // Fecha todos os outros itens
            faqItems.forEach(otherItem => {
                if (otherItem !== item) {
                    otherItem.classList.remove('active');
                    const otherIcon = otherItem.querySelector('.faq-icon i');
                    const otherAnswer = otherItem.querySelector('.faq-answer');
                    if (otherIcon) {
                        otherIcon.className = 'fas fa-plus';
                    }
                    if (otherAnswer) {
                        otherAnswer.style.display = 'none';
                        otherAnswer.style.opacity = '0';
                    }
                }
            });
            
            // Toggle do item atual
            if (isActive) {
                item.classList.remove('active');
                icon.className = 'fas fa-plus';
                answer.style.display = 'none';
                answer.style.opacity = '0';
                console.log('Closing FAQ item');
            } else {
                item.classList.add('active');
                icon.className = 'fas fa-minus';
                console.log('Opening FAQ item');
                
                // Força a exibição como backup
                answer.style.display = 'block';
                answer.style.opacity = '1';
            }
        });
        
        // Adiciona animação de entrada escalonada
        item.style.animationDelay = `${index * 0.1}s`;
        item.classList.add('fade-in-up');
        
        // Adiciona efeito de hover no ícone
        question.addEventListener('mouseenter', function() {
            if (!item.classList.contains('active')) {
                icon.style.transform = 'scale(1.1)';
            }
        });
        
        question.addEventListener('mouseleave', function() {
            if (!item.classList.contains('active')) {
                icon.style.transform = 'scale(1)';
            }
        });
    });
    
    // Adiciona observador de interseção para animações
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    });
    
    faqItems.forEach(item => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(30px)';
        item.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        observer.observe(item);
    });
}

// Inicializa otimizações de performance
initPerformanceOptimizations();

// Adiciona estilos CSS para animações
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    @keyframes fadeOut {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }
    
    .portfolio-modal .modal-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        cursor: pointer;
    }
    
    .portfolio-modal .modal-content {
        background: white;
        border-radius: 20px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        position: relative;
        z-index: 1;
    }
    
    .portfolio-modal .modal-header {
        padding: 2rem 2rem 1rem;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    
    .portfolio-modal .modal-header h3 {
        margin: 0;
        color: #1f2937;
    }
    
    .portfolio-modal .modal-category {
        color: #6b7280;
        font-size: 0.9rem;
    }
    
    .portfolio-modal .modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6b7280;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    
    .portfolio-modal .modal-close:hover {
        background: #f3f4f6;
        color: #374151;
    }
    
    .portfolio-modal .modal-body {
        padding: 1rem 2rem;
    }
    
    .portfolio-modal .modal-body img {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .portfolio-modal .modal-description p {
        color: #4b5563;
        line-height: 1.6;
        margin-bottom: 1rem;
    }
    
    .portfolio-modal .modal-features {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    
    .portfolio-modal .feature-tag {
        background: #f3f4f6;
        color: #374151;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .portfolio-modal .modal-footer {
        padding: 1rem 2rem 2rem;
        text-align: center;
    }
    
    .field-error {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
    
    .form-group input.error,
    .form-group select.error,
    .form-group textarea.error {
        border-color: #ef4444;
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .notification-close {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background 0.3s ease;
    }
    
    .notification-close:hover {
        background: rgba(255, 255, 255, 0.2);
    }
    
    .video-modal-content {
        background: white;
        border-radius: 20px;
        max-width: 600px;
        width: 90%;
        overflow-y: auto;
        position: relative;
        z-index: 1;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }
    
    .video-modal-body {
        padding: 0;
        background: #000;
        border-radius: 0 0 20px 20px;
    }
    
    .video-modal .modal-footer {
        padding: 1rem 2rem;
        text-align: center;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        color: #64748b;
        font-size: 0.9rem;
        border-radius: 0 0 20px 20px;
    }
    
    .nav-link.active {
        color: #2563eb;
    }
    
    .nav-link.active::after {
        width: 100%;
    }
    
    .header.scrolled {
        /* Estilo removido - agora controlado pelo CSS principal */
    }
    
    .nav-toggle.active .bar:nth-child(1) {
        transform: rotate(-45deg) translate(-5px, 6px);
    }
    
    .nav-toggle.active .bar:nth-child(2) {
        opacity: 0;
    }
    
    .nav-toggle.active .bar:nth-child(3) {
        transform: rotate(45deg) translate(-5px, -6px);
    }
    
    .lazy {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .lazy.loaded {
        opacity: 1;
    }
`;

document.head.appendChild(style);

// Efeito de scroll no cabeçalho
const header = document.querySelector('.header');
let lastScrollTop = 0;

window.addEventListener('scroll', () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    if (scrollTop > 100) {
        header.classList.add('scrolled');
    } else {
        header.classList.remove('scrolled');
    }
    
    lastScrollTop = scrollTop;
});

// Menu mobile toggle
const navToggle = document.querySelector('.nav-toggle');
const navMenu = document.querySelector('.nav-menu');

if (navToggle && navMenu) {
    navToggle.addEventListener('click', () => {
        navMenu.classList.toggle('active');
        navToggle.classList.toggle('active');
    });
    
    // Fechar menu ao clicar em um link
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            navMenu.classList.remove('active');
            navToggle.classList.remove('active');
        });
    });
}

// Console log para desenvolvedores
console.log(`
🚀 CentroService Landing Page
📧 Contato: contato@centroservice.com.br
🌐 Website: centroservice.com.br
✨ Desenvolvido com as melhores práticas de UX/UI
`);
